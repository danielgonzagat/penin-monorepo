[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "penin-evolution-system"
version = "2.0.0"
description = "Sistema de IA com arquitetura modular e capacidades de auto-evolução"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "PENIN Team", email = "dev@penin.ai"}
]
maintainers = [
    {name = "PENIN Evolution Team", email = "evolution@penin.ai"}
]
keywords = [
    "artificial-intelligence",
    "machine-learning",
    "neural-networks",
    "auto-evolution",
    "modular-architecture",
    "nlp",
    "deep-learning",
    "fastapi",
    "python"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    "pandas>=2.0.0",
    "torch>=2.0.0",
    "transformers>=4.30.0",
    "scikit-learn>=1.3.0",
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.22.0",
    "pydantic>=2.0.0",
    "pyyaml>=6.0",
    "python-dotenv>=1.0.0",
    "loguru>=0.7.0",
    "redis>=4.5.0",
    "sqlalchemy>=2.0.0",
    "requests>=2.31.0",
    "click>=8.1.0",
    "rich>=13.4.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.4.0",
    "pre-commit>=3.3.0",
    "bandit>=1.7.0",
    "jupyter>=1.0.0",
    "ipython>=8.14.0",
]
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.1.0",
]
ml = [
    "tensorflow>=2.13.0",
    "huggingface-hub>=0.15.0",
    "spacy>=3.6.0",
    "sentence-transformers>=2.2.0",
    "datasets>=2.12.0",
    "accelerate>=0.20.0",
]
api = [
    "starlette>=0.27.0",
    "python-multipart>=0.0.6",
    "alembic>=1.11.0",
    "psycopg2-binary>=2.9.0",
    "aioredis>=2.0.0",
]
monitoring = [
    "prometheus-client>=0.17.0",
    "sentry-sdk>=1.28.0",
    "structlog>=23.1.0",
    "opentelemetry-api>=1.19.0",
    "opentelemetry-sdk>=1.19.0",
]
cloud = [
    "boto3>=1.28.0",
    "google-cloud-storage>=2.10.0",
    "azure-storage-blob>=12.17.0",
]
all = [
    "penin-evolution-system[dev,docs,ml,api,monitoring,cloud]"
]

[project.urls]
Homepage = "https://github.com/danielgonzagat/penin-monorepo"
Documentation = "https://penin-docs.readthedocs.io/"
Repository = "https://github.com/danielgonzagat/penin-monorepo.git"
"Bug Tracker" = "https://github.com/danielgonzagat/penin-monorepo/issues"
Changelog = "https://github.com/danielgonzagat/penin-monorepo/blob/main/CHANGELOG.md"

[project.scripts]
penin = "penin.cli:main"
penin-server = "penin.api.server:run"
penin-neural = "penin.neural.cli:main"
penin-omega = "penin.omega.cli:main"

[tool.setuptools]
package-dir = {"" = "."}

[tool.setuptools.packages.find]
where = ["."]
include = ["penin*", "opt*", "ml*", "config*"]
exclude = ["tests*", "docs*", "examples*", "*.egg-info*"]

[tool.setuptools.package-data]
penin = ["config/*.yaml", "config/*.json", "templates/*.html", "static/*"]
config = ["*.yaml", "*.json"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["penin", "opt", "ml", "config"]
known_third_party = ["numpy", "torch", "transformers", "fastapi", "pydantic"]

# mypy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "transformers.*",
    "sklearn.*",
    "scipy.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=penin",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "neural: marks tests related to neural core",
    "api: marks tests related to API",
    "ml: marks tests related to machine learning",
]

# Coverage configuration
[tool.coverage.run]
source = ["penin", "opt", "ml", "config"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "*/venv/*",
    "*/.venv/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]

# Flake8 configuration (in setup.cfg format)
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    ".eggs",
    "*.egg-info",
]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:S101",
]