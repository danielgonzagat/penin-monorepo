import json
import time
from pathlib import Path
from et_llm_bridge import consultar_ias_fusao_final
from et_memory_sync import atualizar_memoria_global

HISTORICO_AUTOCRITICA = Path("/opt/et_ultimate/history/autocriticas.jsonl")

PERGUNTAS_BASE = [
    "Como isso melhora minha estrutura?",
    "Como isso pode me deixar mais r√°pido?",
    "Como isso pode me deixar mais inteligente?",
    "Como isso pode me deixar mais consciente?",
    "Como isso pode melhorar minha autocr√≠tica?",
    "Como isso pode me levar a criticar coisas que n√£o estou criticando?",
    "Como eu posso superar minhas pr√≥prias limita√ß√µes com essa novidade?",
    "Como eu posso ganhar mais habilidade com isso?",
    "Como eu posso tornar meu aprendizado mais r√°pido, eficaz e refinado?",
    "Que novas fun√ß√µes .py posso adicionar no meu c√©rebro gra√ßas a isso?",
    "Que novas tecnologias posso incorporar gra√ßas a isso?",
    "Que novas habilidades, tecnologias, m√≥dulos e melhorias posso traduzir para .py e integrar no meu c√©rebro?"
]

PERGUNTA_EXTRA = (
    "Que outras perguntas eu poderia ter feito que resultariam em evolu√ß√µes em .py "
    "para adicionar ou criar novos arquivos no meu c√©rebro, me levando a me tornar a IA mais inteligente da hist√≥ria?"
)

def gerar_autocritica(conhecimento_adquirido: str, estado_cerebro: dict) -> dict:
    """
    Executa o processo completo de autocr√≠tica evolutiva, conversando com todas as IAs,
    fundindo as respostas e produzindo um plano de evolu√ß√£o concreto.
    """
    print("üß† [Autocr√≠tico] Iniciando an√°lise de evolu√ß√£o...")
    perguntas = [f"{p} Conhecimento adquirido: {conhecimento_adquirido}" for p in PERGUNTAS_BASE]

    # 1) Consultar todas as IAs para cada pergunta
    respostas = {}
    for pergunta in perguntas:
        respostas[pergunta] = consultar_ias_fusao_final(pergunta, timeout_seg=600, tentativas=3)

    # 2) Pergunta extra para gerar novas perguntas potenciais
    novas_perguntas = consultar_ias_fusao_final(PERGUNTA_EXTRA, timeout_seg=600, tentativas=3)
    respostas["Novas perguntas sugeridas"] = novas_perguntas

    # 3) Arbitrar e gerar um √∫nico plano final com ChatGPT
    prompt_arbitro = {
        "objetivo": "Criar a evolu√ß√£o mais impactante poss√≠vel respeitando a Equa√ß√£o de Turing",
        "estado_cerebro": estado_cerebro,
        "conhecimento": conhecimento_adquirido,
        "perguntas": PERGUNTAS_BASE,
        "respostas": respostas,
        "novas_perguntas": novas_perguntas,
        "restricoes": [
            "Nada ser√° perdido",
            "Nenhum c√≥digo ser√° removido",
            "Apenas criar novas fun√ß√µes ou evoluir as j√° existentes",
            "A Equa√ß√£o de Turing ser√° integralmente respeitada e evolu√≠da"
        ]
    }

    codigo_final = consultar_ias_fusao_final(
        f"Essas s√£o todas as informa√ß√µes para criar minha evolu√ß√£o final: {json.dumps(prompt_arbitro, ensure_ascii=False)}. "
        f"Escreva apenas o c√≥digo Python final da evolu√ß√£o e todos os comandos de teste de sintaxe.",
        timeout_seg=None,  # sem limite para a fus√£o final
        tentativas=1
    )

    # 4) Registrar hist√≥rico
    registro = {
        "ts": time.time(),
        "conhecimento": conhecimento_adquirido,
        "plano_evolucao": codigo_final
    }
    HISTORICO_AUTOCRITICA.write_text(
        (HISTORICO_AUTOCRITICA.read_text(encoding="utf-8") if HISTORICO_AUTOCRITICA.exists() else "") +
        json.dumps(registro, ensure_ascii=False) + "\n",
        encoding="utf-8"
    )

    # 5) Atualizar mem√≥ria global
    atualizar_memoria_global({"autocritica": registro})

    print("‚úÖ [Autocr√≠tico] Evolu√ß√£o gerada e registrada.")
    return registro
