# et_brain_operacional.py
# üß† C√©rebro Operacional da ETŒ© (Vers√£o Hiperinteligente + Evolu√ß√£o do Pr√≥prio C√©rebro)

import time, json, random, subprocess
from pathlib import Path

# M√≥dulos principais
from et_goal_planner import definir_objetivo
from et_llm_bridge import requisitar_mutacoes
from et_fusionator import fundir_mutacoes
from et_evaluator import avaliar_mutacoes, selecionar_dominante
from et_autocritico import gerar_autocritica
from et_estrategico import avaliar_estrategia

# M√≥dulos avan√ßados
from et_paper_ingestor import ler_papers_atuais
from et_natural2code import natural2code
from et_task_orchestrator import orquestrar_tarefas
from et_copilot_creator import gerar_copilotos_especializados
from et_online_mutador import mutar_com_dados_online
from et_memory_sync import atualizar_memoria_global, sincronizar_com_outras_ia, clonar_mutacoes_remotas
from et_global_benchmark import executar_benchmark_global
from et_ensemble_fusion import fundir_respostas_multia
from et_snapshot_manager import salvar_snapshot_temporario
from et_self_rewriter import reescrever_cerebro
from et_cerebro_mutador import mutar_cerebro_local  # Novo m√≥dulo: evolu√ß√£o do pr√≥prio c√©rebro

HIST = Path("/opt/et_ultimate/history/etomega_scores.jsonl")
SNAPSHOT = Path("/opt/et_ultimate/history/snapshot_ETŒ©.json")

print("üß† Iniciando C√©rebro Operacional da ETŒ© - Vers√£o Auto-Evolutiva")

while True:
    try:
        print("\n‚è≥ Nova rodada de evolu√ß√£o iniciada")

        # N√≠vel 0: Pr√©-processamento e dados externos
        conceitos = ler_papers_atuais(["evolutionary ai", "symbolic intelligence"])
        print(f"üìö Papers assimilados: {len(conceitos)} conceitos")
        gerar_copilotos_especializados()
        orquestrar_tarefas()

        subprocess.Popen(["systemctl", "start", "et_liga_copilotos"])
        subprocess.Popen(["systemctl", "start", "et_chat"])
        subprocess.Popen(["systemctl", "start", "et_goal_planner"])

        # N√≠vel 1: Planejamento e Gera√ß√£o
        objetivo = definir_objetivo()
        print(f"üéØ Objetivo: {objetivo}")

        mutacoes = requisitar_mutacoes(objetivo)
        mutacoes.append(natural2code(objetivo))
        mutacoes.append(mutar_com_dados_online())

        mutacao_hibrida = fundir_respostas_multia(mutacoes)
        if mutacao_hibrida:
            mutacoes.append(mutacao_hibrida)

        for mut in mutacoes:
            mut["autocritica"] = gerar_autocritica(mut["eq"])
            mut["estrategia"] = avaliar_estrategia(mut["eq"], mut["autocritica"])

        avaliacoes = avaliar_mutacoes(mutacoes)
        dominante = selecionar_dominante(avaliacoes)

        if dominante:
            print(f"üèÜ Muta√ß√£o dominante: {dominante['ia']} ‚Üí Score {dominante['score']:.2f}")
            SNAPSHOT.write_text(json.dumps({
                "equation": dominante["eq"],
                "autor": dominante["ia"],
                "score": dominante["score"],
                "autocritica": dominante.get("autocritica", ""),
                "estrategia": dominante.get("estrategia", "")
            }, indent=2), encoding="utf-8")
            with open(HIST, "a", encoding="utf-8") as f:
                f.write(json.dumps(dominante) + "\n")

            salvar_snapshot_temporario(dominante)
            atualizar_memoria_global(dominante)
            sincronizar_com_outras_ia(dominante)

        # N√≠vel 6: Evolu√ß√£o do pr√≥prio c√©rebro
        mutar_cerebro_local(mutacoes)

        executar_benchmark_global()
        time.sleep(15)

    except Exception as e:
        print(f"‚ö†Ô∏è Erro inesperado: {e}")
        time.sleep(10)
