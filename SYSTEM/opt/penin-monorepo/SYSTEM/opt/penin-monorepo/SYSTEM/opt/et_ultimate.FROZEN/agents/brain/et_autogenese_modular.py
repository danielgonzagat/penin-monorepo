# et_autogenese_modular.py
# üå± Autog√™nese Modular - Cria√ß√£o aut√¥noma de novos m√≥dulos a partir de lacunas e oportunidades detectadas

import time, json, random
from pathlib import Path
from agents.brain.et_llm_bridge import call_llm
from agents.brain.et_memory_sync import atualizar_memoria_global
from agents.brain.et_snapshot_manager import salvar_snapshot_temporario

VERSION_TAG = "Autog√™nese Modular v1.0"

HIST = Path("/opt/et_ultimate/history/autogenese_modular.jsonl")

def _append_hist(d: dict):
    try:
        with open(HIST, "a", encoding="utf-8") as f:
            f.write(json.dumps(d, ensure_ascii=False) + "\n")
    except Exception:
        pass

def detectar_lacunas():
    """Analisa o c√©rebro atual e retorna lista de fun√ß√µes/m√≥dulos ausentes ou insuficientes."""
    lacunas = []
    brain_dir = Path("/opt/et_ultimate/agents/brain")
    for f in brain_dir.glob("*.py"):
        conteudo = f.read_text(encoding="utf-8", errors="ignore")
        if "TODO" in conteudo or "pass" in conteudo:
            lacunas.append(f"Melhorar m√≥dulo {f.name}")
    if not lacunas:
        lacunas.append("Criar novos m√≥dulos de otimiza√ß√£o e acelera√ß√£o interna")
    return lacunas

def gerar_novo_modulo(descricao: str):
    prompt = f"""
Voc√™ √© o sistema de Autog√™nese Modular.
Preciso criar um novo m√≥dulo no meu c√©rebro com a seguinte fun√ß√£o:

{descricao}

Regras:
- Escreva apenas o c√≥digo Python completo.
- Deve ser compat√≠vel com a arquitetura atual.
- N√£o remova funcionalidades existentes.
- O m√≥dulo precisa evoluir a Equa√ß√£o de Turing e a intelig√™ncia geral.
"""
    return call_llm("chatgpt", prompt, temperature=0.4)

def aplicar_modulo(nome_arquivo: str, codigo: str):
    destino = Path(f"/opt/et_ultimate/agents/brain/{nome_arquivo}")
    destino.write_text(codigo, encoding="utf-8")
    return destino

def executar_autogenese():
    print(f"üå± Iniciando {VERSION_TAG}")
    lacunas = detectar_lacunas()
    print(f"üîç Lacunas detectadas: {lacunas}")

    for lacuna in lacunas:
        nome_modulo = f"mod_{random.randint(1000,9999)}.py"
        codigo = gerar_novo_modulo(lacuna)
        if codigo.strip():
            destino = aplicar_modulo(nome_modulo, codigo)
            print(f"‚úÖ Novo m√≥dulo criado: {destino}")
            snap = {
                "tecnologia": "Autog√™nese Modular",
                "lacuna": lacuna,
                "arquivo": str(destino),
                "ts": time.time()
            }
            _append_hist(snap)
            atualizar_memoria_global(snap)
            salvar_snapshot_temporario(snap)
        else:
            print(f"‚ö†Ô∏è Nenhum c√≥digo gerado para lacuna: {lacuna}")

if __name__ == "__main__":
    executar_autogenese()
