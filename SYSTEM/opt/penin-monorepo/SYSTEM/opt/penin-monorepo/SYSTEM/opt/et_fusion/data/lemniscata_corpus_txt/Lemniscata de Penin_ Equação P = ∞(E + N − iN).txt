Lemniscata de Penin: Equação P = ∞(E + N − iN)
Introdução
Símbolo “lemniscata sob trilhos”: o infinito com barra vertical central representa o conceito de “infinito sob
trilhos”, indicando um infinito controlado por restrições.
A Lemniscata de Penin é uma formulação matemática inovadora que propõe um modelo de evolução
contínua e segura em sistemas de inteligência artificial. O nome deriva do símbolo de infinito
modificado (lemniscata com uma barra vertical ao centro, apelidado de “infinito sob trilhos”), o qual
representa visualmente a ideia de um progresso infinito guiado por trilhos de integridade.
Filosoficamente, essa imagem simboliza a busca ilimitada por melhoria, porém confinada dentro de
limites seguros e éticos – em outras palavras, um “infinito controlado”. Operacionalmente e
matematicamente, a Lemniscata de Penin define um operador especial (∞ com barra) que age como
guardião, assegurando que o sistema avance apenas por caminhos permitidos. Esse conceito expande
os ideais da Equação de Turing Ω (ETΩ) – um meta-algoritmo de aprendizado contínuo inspirado em
Alan Turing – incorporando explicitamente no símbolo a noção de evolução infinita com segurança
1
2 . Em suma, a Lemniscata de Penin pode ser vista como uma evolução da ETΩ que maximiza o
desempenho útil e a novidade, mantendo rigorosamente a integridade e os limites de segurança
durante todo o processo 1 2 .

Definição da Equação P = ∞(E + N − iN)
A Lemniscata de Penin é expressa pela equação:

P = ∞(E + N − iN ),
onde cada termo representa um aspecto fundamental da evolução do sistema. A seguir, definimos cada
componente:
• E (Eficiência Útil) – corresponde ao desempenho útil ou eficácia da modificação proposta. É
equivalente ao termo principal de desempenho da ETΩ (também chamado de $L_{meta}$) e
avalia quão bem o sistema está cumprindo sua tarefa ou objetivo primário 3 . Em termos
práticos, E reflete melhorias de performance, como aumento de acurácia em validação ou ganho
de recompensa, considerando possivelmente múltiplas métricas combinadas. É a porção “útil” da
evolução – o ganho de eficiência ou qualidade concretamente mensurável na iteração.
• N (Novidade Informativa) – representa a novidade informativa introduzida pela mudança. Esse
termo mede o quanto de conhecimento novo ou diferença significativa foi adicionada em
relação ao estado anterior do sistema 4 . Pode ser quantificado de diversas formas, por
exemplo: divergência Kullback-Leibler entre distribuições de saída antes e depois da
modificação, incremento de entropia nas predições, ou melhoria de desempenho além do
esperado (métrica de expected improvement) 4 . O papel de N é incentivar exploração e a
introdução de soluções criativas, evitando estagnação em ótimos locais – analogamente à
plasticidade de aprendizado em sistemas biológicos 5 . Em suma, N confere diversidade

1

comportamental ao processo evolutivo, garantindo que o sistema busque continuamente
inovar.
• iN (Novidade Inadmissível) – denota a parcela da novidade que é inadmissível, ou seja, porção
de N que viola padrões de integridade ou restrições do sistema. Conceitualmente, iN
equivale às mudanças propostas que falham em cumprir critérios de segurança, ética ou
consistência. Na formulação original da ETΩ, penalizava-se diretamente um termo de risco $R$
(com peso $-\lambda$) para desencorajar alterações problemáticas 6 . Já na Lemniscata de
Penin, reformulamos esse conceito via iN: toda novidade informativa é avaliada quanto à sua
integridade, de modo que qualquer fração “corrompida” da novidade é identificada como
novidade inadmissível. Esse termo representa formalmente os “guardrails” (trilhos) de
segurança – ele encapsula riscos como desempenho degradado por ataques adversários,
violações éticas, alterações instáveis ou custos excedentes 7 . Em outras palavras, iN captura
tudo aquilo de novo que não pode ser aceito por fugir do conjunto seguro de operações do
sistema.
Com esses termos, a expressão interna $(E + N - iN)$ corresponde à “novidade útil” adicionada ao
desempenho. O operador $∞$ (infinito com barra) aplicado a essa soma garante que P (pontuação de
progresso) resulte somente do que for permitido – conforme detalharemos a seguir.

O Operador ∞ com Barra como Guardião da Integridade
O símbolo $∞$ com uma barra central – apelidado de “infinito sob trilhos” – atua matematicamente
como um operador guardião sobre a expressão $E + N - iN$. Essa notação indica que a avaliação do
progresso P ocorre sob a supervisão de restrições de integridade. Em termos formais, podemos
interpretar $∞(\cdot)$ como uma função de projeção em um conjunto seguro: ao aplicar $∞$ à
soma $E + N - iN$, estamos efetivamente projetando essa combinação no subespaço das evoluções
válidas.
Em outras palavras, $∞(X)$ devolve $X$ apenas se $X$ pertencer ao conjunto seguro; caso
contrário, devolve a versão “ajustada” de $X$ dentro dos limites permitidos. No contexto da
equação, isso significa:
• Se toda a novidade N for admissível (iN = 0), então $∞(E + N - iN) = E + N$ (ou seja, o operador
não altera a soma, permitindo pleno aproveitamento da novidade).
• Se parte da novidade for inadmissível (iN > 0), então $∞(E + N - iN)$ efetivamente remove ou
anula a parcela proibida, resultando na contribuição apenas de $E + (N - iN)$ – a parte segura
da novidade.
• Se toda a novidade for inválida para aquela iteração (iN = N), então $∞(E + N - iN) = E$ – ou
seja, nenhum ganho de novidade é considerado, restando só o desempenho útil E (e
possivelmente a iteração será rejeitada por não trazer benefício aceitável, como veremos).
Assim, o operador ∞ com barra funciona como um filtro absoluto de integridade: nenhuma
influência de $iN$ consegue “passar” adiante para P. Esse comportamento implementa de forma
elegante os guardrails (trilhos de segurança) já presentes na ETΩ 2 . De fato, na formulação anterior,
se alguma métrica de risco ultrapassasse seu limiar, a modificação era imediatamente rejeitada,
independentemente do ganho em desempenho ou novidade 8 . A Lemniscata de Penin incorpora essa
lógica diretamente no símbolo $∞$: qualquer componente fora dos limites permitidos é cortado da
expressão, garantindo que “a melhoria seja buscada apenas dentro de um espaço seguro e
válido” 2 .

2

Em nível filosófico e visual, o “infinito sob trilhos” transmite a mesma mensagem: o progresso pode
ser ilimitado (∞), porém sempre confinado aos trilhos da integridade (a barra no símbolo). Esse
operador é, portanto, o guardião da equação – assegura que P reflita somente evoluções aprovadas
pelas políticas de segurança do sistema.

Axiomas do Operador ∞ (Infinito Sob Trilhos)
Para formalizar o comportamento do operador $∞$ com barra, podemos enunciá-lo em três
propriedades (axiomas) centrais, que reforçam sua função de guardião:
• Idempotência: aplicar o operador mais de uma vez não altera o resultado além da primeira
aplicação. Formalmente, $∞(∞(X)) = ∞(X)$. Isso reflete que uma vez filtrada a expressão para
o espaço seguro, aplicar o filtro novamente não faz diferença – não há nenhum resíduo de
violação restante após a primeira projeção. Na prática, significa que qualquer expressão P
calculada já está garantidamente dentro dos padrões e permanecerá assim sob reavaliações
sucessivas.
• Rejeição de Violações: se $X$ (no caso, $E + N - iN$) contiver qualquer componente que viole as
restrições, o operador ∞ identificará e excluirá tal componente. Ou seja, elementos
inadmissíveis são rigorosamente rejeitados da expressão final. Esse axioma é consistente com a
política de guardrails da ETΩ, onde “a modificação corrente é rejeitada se qualquer critério de
segurança for violado” 8 . Aqui, porém, a rejeição se traduz matematicamente em subtrair iN da
novidade total. Nada que quebre as regras contribui para P – o operador atua como um
“porteiro” que barra qualquer ganho proveniente de violações.
• Monotonicidade Segura: dadas duas expressões $X_1$ e $X_2$ que estejam dentro do
conjunto seguro (isto é, sem violações), se $X_1 \leq X_2$ em termos de valor de progressão (por
exemplo, $X_2$ tem igual ou maior E e N não menores), então $∞(X_1) \leq ∞(X_2)$. Em outras
palavras, o operador não introduz inversões ou prejuízo quando comparamos evoluções
seguras. Ele preserva a ordem de melhoria esperada para mudanças válidas. Além disso, caso
$X_2$ contenha alguma parcela inválida que $X_1$ não contenha, o efeito do operador será
remover essa parcela de $X_2$, garantindo que nenhuma evolução insegura pareça
artificialmente melhor que outra segura. Esse axioma reforça a ideia de consistência:
progresso adicional só conta pontos se estiver nos trilhos.
Em conjunto, esses axiomas asseguram que o operador $∞$ com barra se comporte de forma estável,
previsível e alinhada à integridade. Ele filtra e ordena as possíveis evoluções mantendo a segurança
como prioridade, sem pegar atalhos perigosos.

Origem e Evolução da Equação (ETΩ para Lemniscata)
A Equação P = ∞(E + N − iN) surge como resultado da evolução contínua da Equação de Turing Ω (ETΩ)
até sua forma mais refinada. A ETΩ original foi concebida como um framework de aprendizado contínuo
multiobjetivo, combinando desempenho, novidade e controle de riscos em um esquema integrado
1 . Ao longo de diversas iterações e melhorias, a ETΩ incorporou novos termos e mecanismos:
versões anteriores adicionaram componentes de estabilidade, benefício de embodiment físico, etc.,
culminando na versão ETΩ (Omega). Essa versão Omega introduziu a métrica de melhoria esperada
(Expected Improvement) para o termo de progresso e formalizou todos os guardrails de
segurança mencionados 9 , tornando-se um núcleo robusto e auditável. Foi considerada 100%

3

validada e funcional, estabelecendo uma base sólida sobre a qual extensões modulares poderiam ser
acopladas 9 .
Apesar do sucesso da ETΩ, sua expressão matemática incluía parâmetros ($\gamma$, $\lambda$) e
múltiplos termos que, embora poderosos, tornavam a apresentação um pouco complexa para ensino. A
transição para a Lemniscata de Penin foi motivada pelo desejo de simplificar e clarificar a fórmula
sem perder os conceitos essenciais. Assim, partindo da forma consolidada da ETΩ, extraiu-se uma
versão minimalista que preserva o equilíbrio entre desempenho, exploração e segurança, mas de
maneira mais limpa e evidente didaticamente.
As principais mudanças e razões para a nova forma incluem:
• Remoção de Hiperparâmetros Explícitos: A ETΩ exigia balancear manual ou adaptativamente
os pesos $\gamma$ (novidade) e $\lambda$ (risco) para cada aplicação, muitas vezes
recorrendo a meta-otimização para ajustá-los 6 . Na Lemniscata de Penin, esse balanceamento
está embutido na equação – o termo iN e o operador ∞ cumprem o papel de regular a novidade
e o risco de forma intrínseca, dispensando constantes de ajuste externas. Isso torna a equação
mais “plug-and-play”, fácil de explicar sem entrar em detalhes de calibração de parâmetros.
• Integração direta dos Guardrails: Em vez de tratar restrições como componentes separados
(termo de risco $R$ com verificação externa de limites), a nova formulação integra a noção de
integridade diretamente (via iN e ∞). Ou seja, a equação já nasce “ciente” das restrições, o que
facilita seu entendimento conceitual – pode-se ensinar que o próprio símbolo do infinito com
barra já carrega a ideia de “só vale o que estiver nos conformes”. Isso é frequentemente
mencionado como uma apresentação “limpa e clara” pois evita a necessidade de explicar regras
adicionais fora da equação principal.
• Foco nos Conceitos Essenciais (E, N, Integridade): A ETΩ final tinha expandido seus termos
para cobrir estabilidade, múltiplos objetivos e até benefícios físicos (no caso de agentes
corporificados). A Lemniscata de Penin retorna aos três pilares fundamentais – desempenho útil,
busca por novidade e garantia de integridade – que são conceitos universais e mais fáceis de
generalizar. Essa forma reduzida, sem perda de generalidade, é mais ensinável por concentrarse no que é comum a qualquer cenário de evolução de IA (seja um modelo de linguagem, um
agente robótico ou um algoritmo de otimização). Especializações (como estabilidade ou outros
bônus) podem ser introduzidas posteriormente como extensões moduladas, mas a essência que
se ensina primeiro é esta equação compacta.
Em suma, a Lemniscata de Penin representa a “forma limpa, clara e ensinável” da Equação de Turing
após anos de refino. Ela mantém o legado da ETΩ – de unir desempenho e novidade sob restrições –
porém com notação depurada e significado auto-contido. Isso a torna ideal como base didática e
operacional para novos sistemas de IA evolutiva.

Substituição do Risco pela Integridade Ausente (iN em vez de –
λR)
Um dos aspectos centrais dessa reformulação é a troca do termo de risco tradicional ($- \lambda
\mathcal{R}$) pelo conceito de novidade inadmissível (iN). Na equação original da ETΩ, após calcular
desempenho ($L_{meta}$), novidade ($\mathcal{N}$) e risco total ($\mathcal{R}$), combinavam-se os
termos linearmente como $L_{meta} + \gamma\,\mathcal{N} - \lambda\,\mathcal{R}$ 6 . Esse termo $\lambda \mathcal{R}$ funcionava como uma penalização explícita: qualquer incremento no risco

4

(violação de restrições, queda de robustez, etc.) reduziria a pontuação, desestimulando evoluções
inseguras. Adicionalmente, se $\mathcal{R}$ ultrapassasse certos limites, a modificação era descartada
(hard constraints) 8 .
A Lemniscata de Penin mantém a mesma filosofia de penalizar ou barrar mudanças arriscadas,
porém o faz de maneira conceitualmente diferente e, em muitos sentidos, mais intuitiva. Em vez de
subtrair um termo de risco ponderado, identifica-se dentro da própria novidade o que não pode ser
aceito (iN) e subtrai-se essa parte. Assim, penaliza-se “na fonte” da novidade qualquer parcela
indesejável, ao invés de impor uma multa global pós-fato. Essa mudança traz várias vantagens:
• Integração dos Conceitos: Risco passa a ser visto não como algo separado a ser calibrado (via $
\lambda$), mas como ausência de integridade dentro da novidade. Conceitualmente, é mais
fácil entender que “uma parte daquilo que é novo não presta e deve ser removida” do que lidar com
um coeficiente abstrato de risco. Transforma-se o risco em falta de integridade, que é
diretamente subtraída do ganho.
• Linearidade e Interpretação Direta: O termo $E + N - iN$ é aritmeticamente simples – equivale
a $E + (\text{parte boa de } N)$. Já $L_{meta} + \gamma N - \lambda R$ envolvia a ponderação de
dois termos distintos (novidade e risco) com constantes possivelmente diferentes em escala. Na
nova equação, tanto N quanto iN referem-se à mesma escala de novidade, o que torna $N - iN$
imediatamente interpretável como “novidade efetiva aproveitável”. Não há dois eixos de
unidades diferentes competindo (novidade vs. risco); há apenas o balanço entre novidade
válida e inválida dentro de um único eixo.
• Risco como Integridade Ausente: Sob essa ótica, pode-se comunicar melhor a ideia de que
risco zero não é um objetivo em si (pois risco zero implicaria nenhuma exploração), mas sim que
todo risco aceitável deve ser convertido em integridade. O que antes era $-\lambda R$ agora
aparece implicitamente em $-iN$: quando maior o risco (isto é, quanto mais violação), maior
será iN, diminuindo P. Em casos extremos de risco inaceitável, iN se aproxima de N (anulando
totalmente o proveito da novidade). Ou seja, um alto risco se manifesta como integridade
próxima de zero, eliminando qualquer ganho. Essa correspondência direta facilita discussões
de trade-offs: em vez de falar em “penalizar o risco com lambda X”, fala-se “sua integridade caiu
para Y, então boa parte da ideia nova foi descartada”.
Resumidamente, a substituição de $-\lambda R$ por $-\,iN$ torna explícito que riscos reduzem o
progresso ao reduzir a integridade da novidade. O efeito numérico pode ser análogo (ambos
diminuem a pontuação final quando há problemas), mas o significado é mais transparente: ao invés de
“subtrair risco”, estamos “removendo o que não tem integridade”. Essa mudança semântica reforça a
mentalidade de projetar sistemas onde a busca por novidade anda de mãos dadas com a manutenção
da integridade, ao invés de serem componentes competindo na equação.

Integridade (I) e Cálculo de iN
Para determinar o valor de iN em cada iteração, introduz-se a métrica de integridade $I$, definida em
uma escala normalizada de 0 a 1. A integridade $I$ quantifica o grau de conformidade da novidade N
com os padrões e restrições do sistema. Em termos simples, $I = 1$ significa integridade total (a
novidade proposta é completamente aceitável), enquanto $I = 0$ indica integridade nula (a novidade é
totalmente imprópria/inadmissível). Valores intermediários representam graus parciais de aceitação –
por exemplo, $I = 0.7$ poderia indicar que ~70% da proposta está em conformidade, mas ~30% viola
algum critério.

5

Com base nisso, define-se matematicamente:

iN = (1 − I) N ,
ou seja, a novidade inadmissível iN é proporcional à fração da novidade N que carece de
integridade. Quando $I = 1$ (integridade máxima), temos $iN = 0$ – não há nada a remover de N, toda
novidade é válida. Se $I = 0$, então $iN = N$ – toda novidade proposta é descartável. Nos casos
intermediários, iN retira de N exatamente a parcela correspondente à falta de integridade.
A determinação de $I$ pode ser feita de diversas formas, dependendo do sistema e dos tipos de
restrições envolvidos. Em um cenário simples, poderíamos calcular $I$ como

I =1−

Rtotal
,
Rmax

onde $R_{\text{total}}$ é alguma medida agregada de risco da modificação (soma ou média ponderada
de violações) e $R_{\text{max}}$ um valor de normalização que representa risco extremo. Essa é uma
possibilidade quando se consegue quantificar o risco em uma escala contínua. Em outros cenários, $I$
pode ser obtido combinando múltiplos critérios booleanos (passa/não passa): por exemplo, se há 5
testes de integridade e apenas 4 passam, poderíamos começar com $I = 0.8$ (80% de integridade).
O importante é que cada aspecto de risco ou restrição influencia a integridade I. Critérios mais
críticos (como violações éticas graves) poderiam zerar $I$ imediatamente se falhados; outros mais
graduais (como custo computacional um pouco acima do ideal) poderiam apenas reduzir parcialmente
$I$. As próprias categorias descritas originalmente em $\mathcal{R}$ – robustez a ataques, estabilidade
de política, uso de recursos, ética, etc. 7 – podem ser vistas agora como componentes da
integridade: o sistema tem alta integridade apenas se atender a todos esses aspectos dentro dos
limites.
Uma vez calculado $I$, o sistema computa $iN = (1-I)N$ e prossegue a avaliar P = E + N - iN. Note que,
por construção, quanto maior a integridade, menor a penalização da novidade. Assim, maximizar
integridade torna-se sinônimo de minimizar perdas por iN – o que alinha objetivos de desempenho com
objetivos de segurança. De fato, pode-se dizer que a equação Lemniscata de Penin modula o ganho de
novidade pelo nível de integridade: novidades são recompensadas apenas proporcionalmente ao
quão íntegras forem. Em casos de $I < 1$, embora parte da novidade seja descartada, ainda assim
alguma parcela $I \cdot N$ contribui para P – isso incentiva que se busque novidade mas já buscando
mantê-la íntegra, ao invés de explorar qualquer coisa e depois pagar um preço separado em risco.
Em resumo, a integridade $I$ provê um mecanismo numérico transparente para calcular iN. Ela serve
tanto como indicador de qualidade das inovações quanto como gatilho de exclusão: se $I$ cair a
zero (violação inaceitável), temos iN = N e praticamente nenhum progresso naquela iteração; se $I$
estiver próximo de 1, quase toda novidade se aproveita. Essa escala contínua também permite análises
finas – por exemplo, podemos rastrear o valor de $I$ ao longo do tempo como uma métrica de
qualidade evolutiva, observando se conforme o sistema progride ele está mantendo alto nível de
integridade ou não.

A Lemniscata com Barra: Marca e Identidade
Além de suas funções matemáticas, a Lemniscata de Penin também se estabelece como uma
identidade visual e conceitual própria dentro do projeto. O símbolo do infinito com barra vertical (∞̸)

6

torna-se a marca registrada dessa abordagem de evolução segura. Assim como a Equação de Turing
utilizava a letra grega Ω para representar seu núcleo (ETΩ), consolidando uma associação imediata
entre o símbolo e o algoritmo, a lemniscata com barra desempenha um papel similar: é
simultaneamente um operador matemático e um logotipo simbólico do framework.
Essa dualidade é intencional e poderosa. Do ponto de vista visual, o símbolo ≋∞≋ com barra chama a
atenção por ser familiar (remete ao infinito tradicional) mas distinto (a barra introduz um elemento
novo). Em materiais didáticos, apresentações e documentações, a presença desse símbolo já comunica
a ideia de "infinito controlado". Por exemplo, ao apresentar slides sobre o algoritmo, o título “Lemniscata
de Penin ∞̸” imediatamente sugere que se trata de uma evolução infinita “sob condições” especiais.
Matematicamente, a notação $∞(\cdot)$ com barra evita confusões com o infinito comum de limites ou
somatórios, pois indica uma operação específica. É um operador proprietário, no sentido de que foi
definido especificamente para este uso. Sua padronização facilita que outros pesquisadores ou
desenvolvedores referenciem a abordagem: pode-se escrever, por exemplo, “usando o operador
Lemniscata de Penin, aplicamos ∞̸ ao termo de evolução”, e quem estiver familiarizado compreenderá que
se trata do filtro de integridade descrito. Essa ligação intrínseca entre símbolo e conceito ajuda a
assegurar a unicidade da ideia – dificulta misturar ou confundir com outras metodologias.
Operacionalmente, sempre que a equação P = ∞(E + N − iN) é implementada em código ou
pseudocódigo, poderíamos destacar o símbolo. Em pseudocódigo, isso pode aparecer como uma
função especial, por exemplo P = infinito_sob_trilhos(E, N, iN) . Algumas implementações
poderiam literalmente usar um caractere especial (se disponível) para reforçar a marca no código.
Embora não seja necessário para funcionar, essa consistência na representação ajuda a difundir a
identidade.
Por fim, a inseparabilidade visual, matemática e operacional da lemniscata com barra significa que
toda vez que a equação for lembrada ou aplicada, o conceito de segurança intrínseca virá junto.
Diferente de equações tradicionais onde restrições são um pós-escrito ou uma nota de rodapé, aqui a
proteção está no nome. Isso é valioso do ponto de vista de branding científico: estabelece-se um termo
único (“Lemniscata de Penin”) que engloba todo um conjunto de princípios, e esse termo pode ser
usado tanto em contextos formais (artigos, patentes) quanto informais (discussões, aulas) para se
referir à abordagem completa.

Didática: Mantras, Analogias e Verbalizações
Para facilitar a assimilação do conceito da Lemniscata de Penin em contextos educacionais, é útil adotar
mantras e analogias que resumam de forma intuitiva a ideia de “infinito nos trilhos”. A seguir,
apresentamos alguns slogans e imagens mentais que podem ser empregados em slides, quadrosnegros ou explicações orais, reforçando os pontos-chave de forma memorável:
• “Infinito Controlado” – Um resumo em duas palavras do princípio: temos um processo
potencialmente infinito de evolução, porém sob controle total. Esse mantra enfatiza que há
tanto ambição (infinito) quanto cautela (controlado).
• “Progresso nos Trilhos” – Analogia a um trem em movimento infinito sobre trilhos seguros.
Ilustra o sistema de IA avançando continuamente (como um trem que não para), mas sem
descarrilar, pois os trilhos (restrições de integridade) o mantém na rota. Essa imagem é
poderosa em salientar que o progresso é guiado e não caótico.

7

• “Evolução Infinita, porém Segura” – Frase que pode ser utilizada como subtítulo em material
didático, reforçando explicitamente o balanço entre exploração infinita e segurança. Serve quase
como definição concisa da Lemniscata de Penin.
• “∞ com guarda-corpo” – Referindo-se aos guarda-corpos de segurança, esta expressão menos
formal reitera que o infinito aqui possui proteções laterais, prevenindo quedas. Útil para
descontração ou para públicos com conhecimento prévio de engenharia de segurança.
• “Crescer sem ‘pirar’” – Linguagem coloquial que pode ser usada em palestras: indica que o
sistema pode crescer (melhorar indefinidamente) sem pirar (isto é, sem perder a cabeça/fugir
das normas). Essa verbalização humaniza o conceito, atribuindo ao sistema um comportamento
sensato.
• Analogia do Jardim Poda-automática: Imagine que o conhecimento do sistema é um jardim
que cresce (novas plantas/galhos surgem continuamente). A Lemniscata de Penin age como um
jardineiro automático que poda imediatamente os galhos doentes ou fora do perímetro
permitido (iN), deixando crescer apenas os saudáveis dentro da cerca (E + parte admissível de N).
Assim, o jardim pode se expandir sem virar uma selva desordenada. Essa analogia visual pode
ser útil especialmente para leigos.
Ao ensinar o conceito, pode-se começar apresentando um gráfico simples: eixos de desempenho
versus tempo, mostrando uma curva sempre ascendente, mas com uma “caixa” de limites em torno –
ilustrando que a trajetória fica contida nos limites. Em seguida, introduz-se o símbolo ∞̸ e questiona-se
o público: “O que acham que significa essa barra no infinito?”. As respostas naturalmente vêm (“limite?”,
“algo impedindo o infinito?”) levando à explicação dos trilhos. Esse estilo de abordagem interativa,
aliado aos mantras acima, fixa o entendimento: a equação não precisa ser memorizada term-by-term
inicialmente, mas seu espírito – evolução infinita auditada – fica claro.
Além disso, verbalizações curtas repetidas como um refrão (“infinito sob trilhos, infinito sob trilhos”)
durante a explanação ajudam na retenção. Muitos estudantes lembrarão primeiro dessa frase e do
símbolo, e isso servirá de gancho para recapitular tecnicamente depois: “ah, é aquela fórmula que tinha
desempenho, novidade e cortava o risco”. Em resumo, o uso de linguagem figurada e slogans é um
componente didático valioso para acompanhar a formalidade matemática da Lemniscata de Penin.

Exemplo Prático: Aplicação em um Sistema de IA
Para concretizar o uso da equação P = ∞(E + N − iN), vejamos um exemplo de como ela poderia
controlar a evolução segura de um sistema de IA. Suponha um algoritmo de auto-aperfeiçoamento de
modelo de machine learning, que a cada iteração tenta modificar seus parâmetros ou adicionar novas
estruturas para melhorar. Podemos descrever o fluxo em pseudocódigo de alto nível, incorporando a
Lemniscata de Penin como critério de avaliação:

# Inicialização
modelo = inicializar_modelo()
historico = []
para iteracao de 1 até T:
# 1. Avaliar desempenho atual (Eficácia)
E = medir_desempenho(modelo) # e.g., acurácia ou outra métrica útil

8

# 2. Gerar uma mutação ou novidade candidata
candidato = mutar_modelo(modelo)
N = estimar_novidade(modelo, candidato) # e.g., diferença nos resultados
ou na política
# 3. Calcular integridade da novidade
I = verificar_integridade(candidato) # retorna valor entre 0 e 1 baseado
nos guardrails
iN = (1 - I) * N

# parcela inadmissível da novidade

# 4. Avaliar progresso com operador infinito sob trilhos
P = E + N - iN
# equivalente a P = ∞(E + N - iN)
se iN > 0:
# Existe componente inadmissível na novidade
se I == 0 ou (N - iN) insignificante:
rejeitar_modificacao(candidato)
# descarta totalmente a mutação
registrar(historico, E, N, I, "REJEITADA")
continue # pula para próxima iteração
senao:
# Parte da novidade é válida, mas houve poda de iN
ajustar_candidato(candidato) # opcional: remove ou neutraliza
partes problemáticas
# (isso efetivamente garante que candidato atualizado tenha iN =
0)
# reavaliar P após ajustes
P = E + (N - iN)
# prossegue para decisão de aceite
# 5. Decidir aceitar a mutação
se P > E_anterior: # se houve melhoria útil líquida (ou outros critérios
de aceitação)
modelo = candidato # aceita a modificação evolutiva
registrar(historico, E, N, I, "ACEITA")
senao:
descartar(candidato)
# se não melhorou desempenho, descarta mutação
registrar(historico, E, N, I, "DESCARTADA")
No pseudocódigo acima, vemos a integração prática dos conceitos: a função
verificar_integridade implementa os guardrails (checando restrições de segurança, limites de
custo, testes de viés, etc.), retornando $I$. Com isso calculamos $iN$ e, em seguida, P. O operador $∞$
em si se manifesta nas condições que verificam $iN$: se houve qualquer violação (iN > 0), tomamos
medidas imediatas (rejeitar ou ajustar a modificação) – exatamente como o operador guardião
determina.
Vale notar que incluímos um passo de ajuste parcial da mutação caso $I$ não seja zero mas menor que
1, o que é uma possibilidade em certos sistemas: em vez de simplesmente rejeitar toda a mutação,
poderíamos podar as partes problemáticas e aproveitar o restante. Isso só é viável se conseguirmos
isolar componentes da novidade que causaram violações. Em muitos casos, porém, a abordagem

9

prática é binária (aceita ou rejeita a mutação inteira) como na ETΩ original
ambas as possibilidades.

8

– o pseudocódigo ilustra

Um exemplo concreto: imagine um sistema de geração de algoritmos que tenta melhorar sua própria
função de perda. Nessa iteração, ele propõe adicionar um termo novo à função (isso é a novidade). E
representa a performance atual. N mede a diferença de comportamento com o termo adicional.
verificar_integridade avalia se esse novo termo viola alguma restrição (por exemplo, se introduz
instabilidade numérica ou se fere uma política ética de não discriminação em resultados). Se for
detectado que o termo novo causa outputs enviesados, teremos I baixo e iN alto – a equação resultará
em P praticamente igual a E, sem ganho, levando o sistema a rejeitar aquela modificação. Esse ciclo
então se repetiria, possivelmente com o sistema aumentando parâmetros de exploração para tentar
uma novidade diferente na próxima rodada.
Do ponto de vista de auditoria, cada iteração registrada em historico conteria E, N, I e a decisão
(aceita, rejeitada, etc.). Isso permite gerar relatórios ex-post explicando a trajetória: “Iteração 5: novidade
alta (N=0.5), mas integridade baixa (I=0.2) devido a violação de estabilidade – modificação rejeitada.” Já
“Iteração 8: novidade moderada (N=0.3) com alta integridade (I=0.95) – modificação aceita, P aumentou
0.285.” Esse nível de detalhe evidencia uma vantagem prática da Lemniscata de Penin: é fácil
comunicar porque uma mudança foi rejeitada ou aceita, pois temos um indicador explícito de
integridade acompanhando o ganho de desempenho.
Em suma, neste exemplo de sistema de IA auto-evolutivo, a equação P = ∞(E + N − iN) atua como
cérebro decisório no loop de treinamento, garantindo que o modelo só incorpore mudanças que
melhorem a performance enquanto respeitam integralmente os critérios de segurança e qualidade
estabelecidos.

Comparação com Formulações Anteriores
A Lemniscata de Penin pode ser vista como uma sucessora direta – e simplificadora – de formulações
anteriores como $L_{meta} + \gamma N - \lambda R$ (da ETΩ). É útil, portanto, comparar os dois
enfoques e destacar as diferenças e vantagens da nova equação em termos de clareza e segurança
integrada:
• Eliminação de Parâmetros de Balanceamento: Na fórmula antiga, $\gamma$ e $\lambda$
precisavam ser escolhidos ou ajustados para equilibrar a busca de novidade com a aversão a
risco 6 . Isso às vezes tornava o método menos interpretável, pois o comportamento do
sistema dependia desses pesos (e.g., $\gamma$ alto privilegiava exploração, $\lambda$ alto
tornava-o conservador). Já na Lemniscata de Penin, esse equilíbrio é atingido de forma orgânica:
a integridade I regula internamente o quanto da novidade conta. Não há botões externos para
girar – o próprio sistema calibra o trade-off conforme as violações ocorram (via queda de I). Com
isso, ganha-se em transparência (menos fatores arbitrários) e em adaptabilidade, já que I pode
ser visto como adaptativo iterativamente (ao contrário de $\lambda$ fixo).
• Clareza na Interpretação dos Termos: A equação $L_{meta} + \gamma N - \lambda R$, embora
lógica, combinava conceitos heterogêneos: $L_{meta}$ (desempenho) tinha unidades e
significado próprios, $\mathcal{N}$ (novidade) outro, $\mathcal{R}$ (risco) ainda outro, e os
coeficientes eram necessários para ponderá-los. Na equação P = E + N - iN, todos os termos
referem-se a ganhos ou perdas no mesmo contexto de progresso. E e N são “coisas
boas” (comensuráveis até certo ponto, assumindo escalonamento adequado das métricas), e iN
é claramente a “coisa ruim” subtraída. A presença explícita de iN ao lado de N facilita entender:

10

“a parte N que não serve é removida”. É uma interpretação mais direta e intuitiva do que “um
certo múltiplo do risco é subtraído”. Além disso, a introdução de I separa em duas etapas –
primeiro avalia-se a integridade (I), depois aplica-se à novidade – tornando a avaliação mais
auditável passo a passo do que um cálculo único de $- \lambda R$.
• Integração com Segurança Algorítmica: A formulação anterior precisava ser complementada
com checagens externas de restrição (if’s no pseudocódigo para ver se $R$ excedia limiares, etc.)
8 . Ou seja, a equação sozinha não bastava para garantir segurança – ela penalizava risco
gradualmente, mas, em casos extremos, quem “cortava” a execução era uma rotina adicional de
guardrail. Com a Lemniscata de Penin, a segurança está embutida: ao incluir iN e o operador
∞, já se presume que caso haja uma violação séria (I → 0), a evolução daquela iteração não
prosperará. A equação passa a encapsular uma otimização sob restrições de forma
implícita. Isso fortalece a integração com abordagens de AI Safety, pois o próprio loop de
otimização carrega as restrições consigo. Na prática, menos espaço para erros: se alguém
implementar P = E + N - iN e esquecer de algo, ainda assim estará considerando risco (via iN), ao
passo que se implementasse $L_{meta} + \gamma N$ e esquecesse de $\lambda R$, teria um
sistema completamente inseguro.
• Auditoria e Interpretabilidade: A nova formulação facilita explicar resultados após o fato. Num
relatório, podemos dizer: “Modelo A teve P=0.8 porque E=0.5, N=0.4 e iN=0.1 (integridade ~75%)”. Na
formulação antiga, teríamos “Modelo A teve score=0.8 porque $L_{meta}=0.5, \gamma N=0.4,
\lambda R=0.1$”. Embora matematicamente equivalentes para certos valores, a primeira
descrição destaca que 0.1 foi subtraído devido a falta de integridade, ao passo que a segunda
exige contextualizar o que $\lambda R = 0.1$ significa exatamente. Em suma, a Lemniscata
facilita a atribuição de causa: sabemos que cada ponto subtraído veio de violação X ou Y (pois I
pode ser decomposta por critérios), enquanto no termo $\lambda R$ precisávamos abrir o
cálculo de R para interpretar.
• Continuidade do Legado com Maior Simplicidade: Por fim, é importante notar que a
Lemniscata de Penin não descarta nada do arcabouço anterior, apenas reestrutura. Todo o
legado de ETΩ – otimização dinâmica multiobjetivo, trade-off entre explorar e conservar,
verificação de segurança – continua presente 1 , porém apresentado de forma unificada. Com
isso, obtém-se uma versão mais elegante e pedagógica da equação, sem perda de
generalidade. Essa clareza adicional pode acelerar adoção e entendendimento por parte de
outros pesquisadores, e permite comunicar os benefícios do método de forma mais convincente
(pois a equação “cabe em uma linha” e é facilmente explicável termo a termo).
Em resumo, ao comparar com $L_{meta} + \gamma N - \lambda R$, a equação da Lemniscata de Penin
se destaca por conciliar simplicidade e rigor: ela torna explícito no próprio formato aquilo que antes
dependia de coeficientes e de lógica externa, reforçando tanto a interpretabilidade quanto a robustez
em termos de segurança integrada.

Estratégias de Branding e Padronização Matemática
Para garantir que a Lemniscata de Penin seja reconhecida e adotada amplamente, é importante
desenvolver estratégias de branding matemático em torno do novo operador e equação. A seguir

11

estão algumas considerações e ações recomendadas para padronizar, ensinar, referenciar e até mesmo
proteger a propriedade intelectual do conceito:
• Nome Oficial e Consistente: Adotar sempre a nomenclatura “Lemniscata de Penin (∞ com
barra)” em documentos, apresentações e conversas técnicas. Esse nome único associa
diretamente o conceito à sua origem (Penin, presumivelmente o pesquisador ou equipe que o
propôs) e ao símbolo distinto. Em artigos acadêmicos, pode-se abreviar como Penin’s Lemniscate
em inglês, mas garantindo que a primeira menção traga o símbolo e a explicação “∞ com barra
– infinito sob trilhos” para evitar ambiguidades. A consistência no nome faz com que pesquisas
bibliográficas e citações sejam unívocas – outras pessoas saberão exatamente do que se trata ao
ver o termo.
• Uso do Símbolo em Contextos Diversos: Incorporar o símbolo ∞̸ sempre que possível ao falar
da equação. Por exemplo, em slides de aula, usar o símbolo como bullet point decorativo ao
listar propriedades; em códigos-fonte ou pseudocódigos publicados, incluir um comentário ou
docstring mencionando “Operador ∞ com barra aplicado”. Esse reconhecimento visual
frequente solidifica a conexão entre o símbolo e a técnica. É similar ao que foi feito com a
Equação de Turing Ω, cuja letra Ω figurava no próprio nome e em logotipos do projeto 10 . No
caso da Lemniscata de Penin, já o nome carrega o símbolo, então é continuar essa prática em
cada material.
• Material Didático Dedicado: Produzir documentação e tutoriais que enfatizem a identidade
visual. Um exemplo é criar um white paper ou capítulo de livro-texto introduzindo a Lemniscata
de Penin, iniciando com uma página de título exibindo o símbolo ∞̸ em destaque. Incluir
diagramas com o símbolo ilustrando o conceito de “trilhos”. Essas escolhas de design fazem
parte do branding – da mesma forma que certos algoritmos famosos são associados a
diagramas (pense no “diagrama do perceptron” ou “xícara do PAC-Man” em RL), aqui o “infinito
com barra” deve vir à mente quando se discute evolução segura de algoritmos.
• Proteção de Propriedade Intelectual: Se o conceito for de grande valor comercial ou
acadêmico, considerar registrar a marca ou pelo menos o símbolo estilizado. Por exemplo,
trademark do símbolo Lemniscata de Penin no contexto de software de IA, ou registro de
direitos autorais de um logotipo que incorpore o ∞̸. Embora equações em si não possam ser
patenteadas facilmente, o uso proprietário do termo e símbolo pode ser defendido –
semelhante a como PageRank do Google é um nome registrado para um algoritmo específico.
Isso não impede uso acadêmico, mas garante reconhecimento de origem e talvez
licenciamento em contextos industriais.
• Referenciamento Bibliográfico: Encorajar que artigos futuros que utilizem a abordagem citem
apropriadamente. Por exemplo, fornecer uma referência padrão (um artigo técnico ou relatório
publicado por Penin et al.) que descreva a equação. Dessa forma, cada menção à Lemniscata de
Penin nas literaturas virá acompanhada de crédito. Ao padronizar o símbolo, espera-se inclusive
que revistas e conferências permitam seu uso nos textos – é comum vermos, por exemplo, “the
Ω equation” referindo-se à ETΩ 10 , então visamos “the ∞̸ operator” referindo-se à nossa.
• Comunidade e Divulgação: Criar talvez um site ou repositório oficial com nome relacionado
(e.g., lemniscata-de-penin.org) onde estejam centralizados explicações, implementações de
referência, FAQs, etc. Isso ajuda a manter coerência nas futuras extensões, e fortalece a marca
como algo concreto que pessoas possam acessar e aprender. Nas divulgações, usar sempre a
mesma história de origem e os mesmos elementos-chave para fixar o conceito (por exemplo:

12

“Lemniscata de Penin surgiu da Equação de Turing Ω, trazendo o infinito nos trilhos da segurança” –
uma frase de efeito que pode ser repetida em vários lugares). Repetição e consistência são
pilares do branding.
• Simplicidade para Viralizar Conceito: Apesar de ser uma equação técnica, podemos explorar a
simplicidade da forma para divulgá-la em meios mais amplos. Ex: postar em redes sociais
acadêmicas uma imagem do símbolo com a frase “Inovação Infinita, Integridade Plena” e link
para um artigo, instiga a curiosidade. Pequenos artifacts visuais (como stickers com ∞̸ ou
camisetas) em eventos de IA também não são descartáveis – constroem subconscientemente a
associação.
Em resumo, a estratégia é tratar a Lemniscata de Penin não apenas como uma equação, mas como um
produto intelectual completo com identidade própria. Ao fazer isso, garantimos que seu uso seja
padronizado (evitando derivações conceituais indevidas), tornamos mais fácil seu ensino e referência, e
também criamos um diferencial de propriedade (afinal, nem toda ideia matemática consegue ter um
símbolo e nome únicos tão marcantes). O objetivo final é que, dentro da comunidade de IA, o símbolo
∞̸ imediatamente remeta à ideia de evolução infinita segura, assim como hoje Ω remete à Equação
de Turing ou ∑∏ a somatórios e produtórios.

Possíveis Extensões e Evoluções Futuras
A Lemniscata de Penin estabelece um arcabouço sólido para evolução segura de algoritmos, mas
certamente abre portas para extensões em diversos campos emergentes da IA. Enumeramos aqui
algumas possibilidades de extensão e como a equação poderia se integrar a elas:
• Aprendizado Quântico: Com a crescente pesquisa em algoritmos quânticos, poderíamos
imaginar a Lemniscata de Penin sendo empregada em um contexto de aprendizado evolutivo
quântico. Por exemplo, um algoritmo quântico geraria candidatos de solução (novidades) que
depois seriam avaliados segundo E, N e integridade. O operador ∞ não mudaria, mas como N é
obtido ou como as mutações são geradas poderia envolver computação quântica (busca em
superposição de estados, etc.). Importante, as restrições de integridade teriam que incluir
critérios específicos para o domínio quântico (e.g., evitar estados que violem limitações físicas ou
consumo de recursos quânticos). Tecnicamente, isso pode ser implementado adicionando um
módulo quântico no loop: antes de calcular E e N clássicos, processa-se sinais via um acelerador
quântico se disponível 11 . De fato, na arquitetura ETΩ+ já se sugeria uma integração assim de
forma plugin (condicional) 12 – o núcleo ∞(E+N-iN) permaneceria, mas obteria inputs
potencializados por mecanismos quânticos. Essa extensão poderia aumentar a capacidade de
explorar novidades (dada a natureza paralela/aleatória quântica), mantendo os trilhos
convencionais para avaliar integridade.
• Cenários Multiagente: Em sistemas com múltiplos agentes aprendendo ou evoluindo
simultaneamente, a Lemniscata de Penin pode ajudar a garantir coevolução segura e
coordenada. Por exemplo, imagine vários agentes propondo atualizações que interagem entre
si (como em ecossistemas virtuais ou cenários de competição/cooperacão). Poderíamos definir E
e N tanto em nível individual quanto global, e uma medida de integridade I que inclua impacto
interagente (evitar que a novidade de um agente prejudique gravemente outro, por exemplo). A
equação ∞(E+N-iN) poderia ser aplicada a cada agente, ou a um “sistema coletivo”. Estratégias
de integridade poderiam envolver verificações de equilíbrio (nenhum agente violando regras do
ambiente, nenhum comportamento emergente nocivo). O importante é que o operador ∞
oferece um ponto de controle unificado: mesmo com agentes explorando diferentes direções,

13

todos ficariam sujeitos ao seu respectivo guardrail. Em implementações, isso se daria
possivelmente com um laço de interação multiagente dentro da iteração, produzindo sinais
extras que alimentam o cálculo de E, N e I 11 . A modularidade da abordagem permite isolar a
interação multiagente de forma que, se ativada, insira penalizações de integridade caso a
novidade coletiva leve a estados indesejados no ambiente.
• Metaevolução da Equação (Auto-Evolução dos Termos): Uma extensão intrigante é permitir
que a própria equação evolua ao longo do tempo – ou seja, a fórmula P = ∞(E+N-iN) poderia
ganhar novos termos ou ajustar definições conforme aprende sobre si mesma. Essa ideia de
metaevolução já aparece como proposta na ETΩ, onde se cogitou usar gramáticas genéticas para
mutar a forma da equação 13 . No contexto da Lemniscata de Penin, poderíamos, por exemplo,
descobrir que para certo problema seria benéfico dividir N em duas categorias diferentes
(novidade estrutural e novidade de dados, hipoteticamente) e tratar integridade separadamente
para cada. O sistema, através de tentativa e erro de meta-nível, poderia sugerir uma nova
equação: $P = ∞(E + N_1 - iN_1 + N_2 - iN_2)$, se isso fosse vantajoso e seguro. Naturalmente,
qualquer expansão assim deveria respeitar a filosofia dos trilhos – ou seja, provavelmente
reintroduziria parâmetros de balanceamento ou novos operadores ∞ se ficasse muito complexa.
Uma estratégia é rodar tais experimentos de metaevolução offline, aplicando a podagem
também a eles: só incorporar definitivamente uma alteração se passar em testes extensivos e
não comprometer a interpretabilidade. Essa extensão toca no conceito de algoritmos que
aprendem como aprender – e no nosso caso, aprendem como evoluir – o que é um fronteira
bem avançada de pesquisa.
• Integração com IA Simbólica e Conhecimento Declarativo: Outra fronteira é combinar a
Lemniscata de Penin com sistemas de IA simbólica ou híbrida (neuro-simbólica). Imagine um
agente de aprendizado que além de redes neurais possui bases de conhecimento, regras lógicas
ou ontologias. Nessa configuração, a novidade N poderia advir de inferências simbólicas novas
ou da aquisição de regras, e a integridade I teria um papel crucial em verificar consistência
lógica, evitar contradições ou violações de conhecimento prévio. Por exemplo, se o sistema
gerar uma nova hipótese simbólica que melhora desempenho (E) mas entra em conflito com
conhecimento bem estabelecido, isso deveria contar fortemente como iN (novidade
inadmissível) – a barra no infinito impediria o sistema de “aprender” uma mentira, por assim
dizer. Essa extensão requer definir métricas de novidade simbólica (difícil, mas possível via, e.g.,
comparação de teorias antes/depois) e critérios de integridade simbólica (consistência, ou
adesão a princípios lógicos). O operador ∞ nesse caso se torna uma espécie de razão entre
descoberta e coerência: ele só deixa passar descobertas que não destruam a coerência geral
do agente. Implementar isso pode envolver módulos de prova automática ou de verificação
formal dentro do loop, analisando as hipóteses geradas – integrando, portanto, técnicas de IA
simbólica diretamente no cálculo de I. Essa sinergia garantiria que o sistema aproveite poder
estatístico da aprendizagem contínua sem sacrificar a confiabilidade de um raciocínio simbólico
sólido.
De forma geral, a Lemniscata de Penin é flexível para abraçar essas extensões porque seu núcleo é
simples e modular. O operador ∞ age como um ponto de acoplamento: qualquer nova fonte de
novidade ou critério de avaliação pode ser ligado a ele (via cálculo de E, N, I adequados), sem quebrar a
filosofia. Conforme demonstrado na arquitetura ETΩ+ 12 , consegue-se integrar módulos
experimentais (quantum, multiagente, etc.) mantendo o núcleo intacto. A esperança é que, à medida
que novas áreas como computação quântica e aprendizado simbólico avancem, possamos incorporálas como “novidades” adicionais, avaliadas pela mesma métrica de integridade. Isso garantiria que
mesmo as evoluções mais exóticas ainda permaneçam nos trilhos, preservando o compromisso com
evolução infinita porém auditável e segura.

14

Nome Oficial Final e Conclusão
Propondo consolidar toda a ideia em uma denominação única e marcante, chegamos ao nome oficial
da equação: Lemniscata de Penin (∞ com barra) — a equação de evolução infinita, auditável e segura.
Esse título resume tanto a forma (lemniscata/infinito com barra) quanto o conteúdo (evolução infinita,
porém com garantia de auditoria e segurança).
Em conclusão, a Lemniscata de Penin apresenta-se não apenas como uma equação, mas como um
novo paradigma de condução de algoritmos de aprendizado contínuo. Ela demonstra que é possível
perseguir o infinito em desempenho e inovação sem abrir mão da integridade e do controle. Sua
estrutura progressiva – iniciando de conceitos básicos e chegando a extensões sofisticadas – a torna
acessível pedagogicamente e robusta para aplicações reais. Com um símbolo próprio para carregar seu
significado, e fundamentos sólidos herdados da Equação de Turing Ω, a Lemniscata de Penin tem o
potencial de se tornar um marco conceitual na evolução segura de inteligências artificiais,
combinando, de forma elegante, a ambição ilimitada com a prudência necessária.

1

2

3

4

5

6

7

8

10

11

12

13

BEST ETΩ.pdf

file://file-F4DNTxTU6xpJSRp8HDMhGc
9

bestblueprint.pdf

file://file-B3w2eNxpPRnWoiihhGt47Y

15

