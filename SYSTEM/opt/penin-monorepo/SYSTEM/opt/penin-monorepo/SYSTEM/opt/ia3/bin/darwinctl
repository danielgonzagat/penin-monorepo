#!/usr/bin/env python3
# /opt/ia3/bin/darwinctl
# CLI avan√ßado para controle do Sistema Celular IA¬≥

import os
import sys
import json
import time
import signal
import argparse
import subprocess
import urllib.request
from datetime import datetime
from pathlib import Path

IA3_HOME = os.getenv("IA3_HOME", "/opt/ia3")
NEUROGENESIS_SCRIPT = os.path.join(IA3_HOME, "bin/ia3_neurogenesis.py")
TEXT_MODE_SCRIPT = os.path.join(IA3_HOME, "bin/ia3_text_mode.py")
WORM_LOG = os.path.join(IA3_HOME, "var/worm/ia3_worm.log")
SNAPSHOTS_DIR = os.path.join(IA3_HOME, "var/snapshots")
MLRUNS_DIR = os.path.join(IA3_HOME, "var/mlruns")

class IA3Controller:
    """Controlador principal do sistema IA¬≥"""
    
    def __init__(self):
        self.metrics_port = int(os.getenv("IA3_METRICS_PORT", "9093"))
    
    def get_metrics(self):
        """Busca m√©tricas do sistema"""
        try:
            url = f"http://localhost:{self.metrics_port}/metrics"
            with urllib.request.urlopen(url, timeout=5) as response:
                content = response.read().decode('utf-8')
            
            metrics = {}
            for line in content.split('\n'):
                if line.startswith('ia3_'):
                    parts = line.split()
                    if len(parts) >= 2:
                        key = parts[0]
                        try:
                            value = float(parts[1])
                            metrics[key] = value
                        except:
                            pass
            return metrics
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao buscar m√©tricas: {e}")
            return {}
    
    def get_worm_stats(self):
        """Estat√≠sticas do WORM log"""
        if not os.path.exists(WORM_LOG):
            return {"events": 0, "last_event": None}
        
        event_count = 0
        last_event = None
        
        try:
            with open(WORM_LOG, 'r') as f:
                for line in f:
                    if line.strip():
                        event_count += 1
                        try:
                            last_event = json.loads(line.strip())
                        except:
                            pass
        except Exception:
            pass
        
        return {"events": event_count, "last_event": last_event}
    
    def get_snapshots(self):
        """Lista snapshots dispon√≠veis"""
        if not os.path.exists(SNAPSHOTS_DIR):
            return []
        
        snapshots = []
        for f in os.listdir(SNAPSHOTS_DIR):
            if f.endswith('.pt'):
                path = os.path.join(SNAPSHOTS_DIR, f)
                stat = os.stat(path)
                snapshots.append({
                    "filename": f,
                    "path": path,
                    "size": stat.st_size,
                    "modified": datetime.fromtimestamp(stat.st_mtime)
                })
        
        return sorted(snapshots, key=lambda x: x["modified"], reverse=True)
    
    def start_system(self, mode="numeric", rounds=0, background=True):
        """Inicia o sistema IA¬≥"""
        cmd = ["python3", NEUROGENESIS_SCRIPT]
        
        if rounds > 0:
            cmd.extend(["--rounds", str(rounds)])
        
        env = os.environ.copy()
        if mode == "text":
            env["IA3_MODE"] = "text"
        
        if background:
            # Iniciar em background
            process = subprocess.Popen(
                cmd,
                env=env,
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL
            )
            print(f"‚úÖ Sistema IA¬≥ iniciado em background (PID: {process.pid})")
            print(f"   Modo: {mode}")
            print(f"   M√©tricas: http://localhost:{self.metrics_port}/metrics")
            if rounds > 0:
                print(f"   Rodadas: {rounds}")
            else:
                print(f"   Rodadas: infinitas (pare com 'darwinctl stop')")
        else:
            # Executar em foreground
            print(f"üß¨ Iniciando sistema IA¬≥ em foreground...")
            print(f"   Use Ctrl+C para parar")
            subprocess.run(cmd, env=env)
    
    def stop_system(self):
        """Para o sistema IA¬≥"""
        try:
            # Encontrar processos
            result = subprocess.run(
                ["pgrep", "-f", "ia3_neurogenesis.py"],
                capture_output=True,
                text=True
            )
            
            if result.returncode == 0:
                pids = result.stdout.strip().split('\n')
                for pid in pids:
                    if pid:
                        print(f"üõë Parando processo {pid}...")
                        os.kill(int(pid), signal.SIGTERM)
                        time.sleep(1)
                        
                        # Verificar se ainda est√° rodando
                        try:
                            os.kill(int(pid), 0)  # Test if process exists
                            print(f"   For√ßando t√©rmino do processo {pid}...")
                            os.kill(int(pid), signal.SIGKILL)
                        except ProcessLookupError:
                            pass  # Process already terminated
                
                print("‚úÖ Sistema IA¬≥ parado")
            else:
                print("‚ÑπÔ∏è Nenhum processo IA¬≥ encontrado")
        
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao parar sistema: {e}")
    
    def status(self):
        """Mostra status completo do sistema"""
        print("\n" + "="*60)
        print("üß¨ STATUS DO SISTEMA CELULAR IA¬≥")
        print("="*60)
        
        # Verificar se est√° rodando
        try:
            result = subprocess.run(
                ["pgrep", "-f", "ia3_neurogenesis.py"],
                capture_output=True,
                text=True
            )
            
            if result.returncode == 0:
                pids = result.stdout.strip().split('\n')
                print(f"üü¢ Status: ATIVO ({len(pids)} processo(s))")
                for pid in pids:
                    if pid:
                        print(f"   PID: {pid}")
            else:
                print("üî¥ Status: INATIVO")
        except:
            print("üî¥ Status: DESCONHECIDO")
        
        # M√©tricas atuais
        print(f"\nüìä M√âTRICAS ATUAIS:")
        metrics = self.get_metrics()
        if metrics:
            key_metrics = [
                ("ia3_neurons_total", "Neur√¥nios Totais"),
                ("ia3_neurons_valid", "Neur√¥nios V√°lidos"),
                ("ia3_generation", "Gera√ß√£o"),
                ("ia3_consciousness_level", "Consci√™ncia"),
                ("ia3_round_current", "Rodada Atual"),
                ("ia3_score_avg", "Score M√©dio"),
                ("ia3_loss_current", "Loss Atual")
            ]
            
            for key, label in key_metrics:
                if key in metrics:
                    value = metrics[key]
                    if key == "ia3_consciousness_level" or key == "ia3_score_avg":
                        print(f"   {label}: {value:.3f}")
                    elif key == "ia3_loss_current":
                        print(f"   {label}: {value:.6f}")
                    else:
                        print(f"   {label}: {int(value)}")
        else:
            print("   ‚ö†Ô∏è M√©tricas n√£o dispon√≠veis")
        
        # WORM Log
        print(f"\nüìú WORM LOG:")
        worm_stats = self.get_worm_stats()
        print(f"   Eventos: {worm_stats['events']}")
        if worm_stats['last_event']:
            last = worm_stats['last_event']
            print(f"   √öltimo evento: {last.get('event', 'unknown')} ({last.get('timestamp', 'unknown')})")
        
        # Snapshots
        print(f"\nüíæ SNAPSHOTS:")
        snapshots = self.get_snapshots()
        if snapshots:
            print(f"   Total: {len(snapshots)}")
            for i, snap in enumerate(snapshots[:3]):
                size_mb = snap['size'] / (1024*1024)
                print(f"   {i+1}. {snap['filename']} ({size_mb:.1f}MB, {snap['modified']})")
            if len(snapshots) > 3:
                print(f"   ... e mais {len(snapshots)-3} snapshots")
        else:
            print("   Nenhum snapshot encontrado")
        
        print("="*60 + "\n")
    
    def metrics(self, watch=False):
        """Mostra m√©tricas do sistema"""
        if watch:
            print("üìä M√©tricas IA¬≥ (atualizando a cada 5s, Ctrl+C para sair)")
            print("-" * 60)
            
            try:
                while True:
                    metrics = self.get_metrics()
                    if metrics:
                        # Clear screen
                        os.system('clear' if os.name == 'posix' else 'cls')
                        print(f"üìä M√©tricas IA¬≥ - {datetime.now().strftime('%H:%M:%S')}")
                        print("-" * 60)
                        
                        for key, value in sorted(metrics.items()):
                            if isinstance(value, float):
                                if 'score' in key or 'consciousness' in key:
                                    print(f"{key:30s} {value:8.3f}")
                                elif 'loss' in key:
                                    print(f"{key:30s} {value:8.6f}")
                                else:
                                    print(f"{key:30s} {value:8.1f}")
                            else:
                                print(f"{key:30s} {value}")
                    else:
                        print("‚ö†Ô∏è M√©tricas n√£o dispon√≠veis")
                    
                    time.sleep(5)
            
            except KeyboardInterrupt:
                print("\n‚úÖ Monitoramento interrompido")
        else:
            # Mostrar uma vez
            metrics = self.get_metrics()
            if metrics:
                print("üìä M√©tricas Atuais:")
                print("-" * 40)
                for key, value in sorted(metrics.items()):
                    if isinstance(value, float):
                        if 'score' in key or 'consciousness' in key:
                            print(f"{key:30s} {value:8.3f}")
                        elif 'loss' in key:
                            print(f"{key:30s} {value:8.6f}")
                        else:
                            print(f"{key:30s} {value:8.1f}")
                    else:
                        print(f"{key:30s} {value}")
            else:
                print("‚ö†Ô∏è M√©tricas n√£o dispon√≠veis")
    
    def worm(self, tail_lines=50, follow=False):
        """Mostra WORM log"""
        if not os.path.exists(WORM_LOG):
            print(f"‚ö†Ô∏è WORM log n√£o encontrado: {WORM_LOG}")
            return
        
        if follow:
            print(f"üìú Seguindo WORM log (Ctrl+C para sair)...")
            subprocess.run(["tail", "-f", WORM_LOG])
        else:
            print(f"üìú √öltimas {tail_lines} linhas do WORM log:")
            print("-" * 60)
            
            try:
                with open(WORM_LOG, 'r') as f:
                    lines = f.readlines()[-tail_lines:]
                
                for line in lines:
                    try:
                        event = json.loads(line.strip())
                        ts = event.get('timestamp', '')[11:19]  # HH:MM:SS
                        event_type = event.get('event', 'unknown')
                        
                        # Formata√ß√£o espec√≠fica por tipo de evento
                        if event_type == "neuron_birth":
                            print(f"{ts} üê£ NASCIMENTO - Neur√¥nio #{event.get('neuron_id', '?')} | Total: {event.get('total_neurons', '?')}")
                        elif event_type == "neuron_death":
                            score = event.get('final_score', 0)
                            print(f"{ts} ‚ò†Ô∏è  MORTE     - Neur√¥nio #{event.get('neuron_id', '?')} | Score: {score:.3f}")
                        elif event_type == "round_complete":
                            valid = event.get('valid_neurons', 0)
                            total = event.get('neurons_final', 0)
                            round_num = event.get('round', 0)
                            print(f"{ts} üîÑ RODADA    - #{round_num} | V√°lidos: {valid}/{total}")
                        elif event_type == "total_extinction":
                            print(f"{ts} üíÄ EXTIN√á√ÉO  - Gera√ß√£o {event.get('generation', '?')}")
                        elif event_type == "rebirth":
                            print(f"{ts} üå± RENASCER  - Nova gera√ß√£o {event.get('new_generation', '?')}")
                        else:
                            print(f"{ts} {event_type}")
                    except:
                        print(line.strip())
                        
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao ler WORM log: {e}")
    
    def snapshots(self):
        """Lista snapshots dispon√≠veis"""
        snapshots = self.get_snapshots()
        
        if not snapshots:
            print("üíæ Nenhum snapshot encontrado")
            return
        
        print(f"üíæ Snapshots Dispon√≠veis ({len(snapshots)} total):")
        print("-" * 80)
        print(f"{'#':>3} {'Nome':40} {'Tamanho':>10} {'Data/Hora':>20}")
        print("-" * 80)
        
        for i, snap in enumerate(snapshots):
            size_mb = snap['size'] / (1024*1024)
            mod_time = snap['modified'].strftime("%Y-%m-%d %H:%M:%S")
            print(f"{i+1:>3} {snap['filename']:40} {size_mb:>8.1f}MB {mod_time:>20}")
    
    def test_text_mode(self):
        """Testa o modo texto"""
        print("üß™ Testando modo texto IA¬≥...")
        
        try:
            subprocess.run([
                "python3", TEXT_MODE_SCRIPT
            ], check=True)
        except subprocess.CalledProcessError as e:
            print(f"‚ö†Ô∏è Erro no teste de modo texto: {e}")
        except FileNotFoundError:
            print(f"‚ö†Ô∏è Script de modo texto n√£o encontrado: {TEXT_MODE_SCRIPT}")
    
    def dashboard_info(self):
        """Informa√ß√µes sobre dashboard"""
        dashboard_path = os.path.join(IA3_HOME, "dashboards/ia3_dashboard.json")
        
        print("üìä Dashboard Grafana IA¬≥")
        print("-" * 40)
        print(f"Dashboard JSON: {dashboard_path}")
        print(f"M√©tricas URL: http://localhost:{self.metrics_port}/metrics")
        print()
        print("Para configurar o dashboard:")
        print("1. Instale Grafana")
        print("2. Configure Prometheus como datasource")
        print("3. Importe o dashboard JSON")
        print("4. Configure Prometheus para coletar de localhost:9093")

def main():
    parser = argparse.ArgumentParser(
        description="üß¨ Darwin Control - Sistema Celular IA¬≥ Neuroevolutivo",
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    subparsers = parser.add_subparsers(dest='command', help='Comandos dispon√≠veis')
    
    # Start
    start_parser = subparsers.add_parser('start', help='Inicia o sistema IA¬≥')
    start_parser.add_argument('--mode', choices=['numeric', 'text'], default='numeric',
                            help='Modo de opera√ß√£o')
    start_parser.add_argument('--rounds', type=int, default=0,
                            help='N√∫mero de rodadas (0 = infinito)')
    start_parser.add_argument('--foreground', action='store_true',
                            help='Executa em foreground')
    
    # Stop
    subparsers.add_parser('stop', help='Para o sistema IA¬≥')
    
    # Status
    subparsers.add_parser('status', help='Mostra status do sistema')
    
    # Metrics
    metrics_parser = subparsers.add_parser('metrics', help='Mostra m√©tricas')
    metrics_parser.add_argument('--watch', action='store_true',
                              help='Monitora m√©tricas continuamente')
    
    # WORM
    worm_parser = subparsers.add_parser('worm', help='Mostra WORM log')
    worm_parser.add_argument('-n', '--lines', type=int, default=50,
                           help='N√∫mero de linhas')
    worm_parser.add_argument('-f', '--follow', action='store_true',
                           help='Segue o log')
    
    # Snapshots
    subparsers.add_parser('snapshots', help='Lista snapshots')
    
    # Test text mode
    subparsers.add_parser('test-text', help='Testa modo texto')
    
    # Dashboard
    subparsers.add_parser('dashboard', help='Info sobre dashboard')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    controller = IA3Controller()
    
    try:
        if args.command == 'start':
            controller.start_system(
                mode=args.mode,
                rounds=args.rounds,
                background=not args.foreground
            )
        elif args.command == 'stop':
            controller.stop_system()
        elif args.command == 'status':
            controller.status()
        elif args.command == 'metrics':
            controller.metrics(watch=args.watch)
        elif args.command == 'worm':
            controller.worm(tail_lines=args.lines, follow=args.follow)
        elif args.command == 'snapshots':
            controller.snapshots()
        elif args.command == 'test-text':
            controller.test_text_mode()
        elif args.command == 'dashboard':
            controller.dashboard_info()
        
    except KeyboardInterrupt:
        print("\n‚úÖ Comando interrompido")
    except Exception as e:
        print(f"‚ùå Erro: {e}")

if __name__ == "__main__":
    main()